package mock

// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

import (
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
)

// ScamDetectorClientMock implements twitter.ScamDetectorClient
type ScamDetectorClientMock struct {
	t minimock.Tester

	funcCheckEmail          func(email string) (err error)
	inspectFuncCheckEmail   func(email string)
	afterCheckEmailCounter  uint64
	beforeCheckEmailCounter uint64
	CheckEmailMock          mScamDetectorClientMockCheckEmail
}

// NewScamDetectorClientMock returns a mock for twitter.ScamDetectorClient
func NewScamDetectorClientMock(t minimock.Tester) *ScamDetectorClientMock {
	m := &ScamDetectorClientMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.CheckEmailMock = mScamDetectorClientMockCheckEmail{mock: m}
	m.CheckEmailMock.callArgs = []*ScamDetectorClientMockCheckEmailParams{}

	return m
}

type mScamDetectorClientMockCheckEmail struct {
	mock               *ScamDetectorClientMock
	defaultExpectation *ScamDetectorClientMockCheckEmailExpectation
	expectations       []*ScamDetectorClientMockCheckEmailExpectation

	callArgs []*ScamDetectorClientMockCheckEmailParams
	mutex    sync.RWMutex
}

// ScamDetectorClientMockCheckEmailExpectation specifies expectation struct of the ScamDetectorClient.CheckEmail
type ScamDetectorClientMockCheckEmailExpectation struct {
	mock    *ScamDetectorClientMock
	params  *ScamDetectorClientMockCheckEmailParams
	results *ScamDetectorClientMockCheckEmailResults
	Counter uint64
}

// ScamDetectorClientMockCheckEmailParams contains parameters of the ScamDetectorClient.CheckEmail
type ScamDetectorClientMockCheckEmailParams struct {
	email string
}

// ScamDetectorClientMockCheckEmailResults contains results of the ScamDetectorClient.CheckEmail
type ScamDetectorClientMockCheckEmailResults struct {
	err error
}

// Expect sets up expected params for ScamDetectorClient.CheckEmail
func (mmCheckEmail *mScamDetectorClientMockCheckEmail) Expect(email string) *mScamDetectorClientMockCheckEmail {
	if mmCheckEmail.mock.funcCheckEmail != nil {
		mmCheckEmail.mock.t.Fatalf("ScamDetectorClientMock.CheckEmail mock is already set by Set")
	}

	if mmCheckEmail.defaultExpectation == nil {
		mmCheckEmail.defaultExpectation = &ScamDetectorClientMockCheckEmailExpectation{}
	}

	mmCheckEmail.defaultExpectation.params = &ScamDetectorClientMockCheckEmailParams{email}
	for _, e := range mmCheckEmail.expectations {
		if minimock.Equal(e.params, mmCheckEmail.defaultExpectation.params) {
			mmCheckEmail.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmCheckEmail.defaultExpectation.params)
		}
	}

	return mmCheckEmail
}

// Inspect accepts an inspector function that has same arguments as the ScamDetectorClient.CheckEmail
func (mmCheckEmail *mScamDetectorClientMockCheckEmail) Inspect(f func(email string)) *mScamDetectorClientMockCheckEmail {
	if mmCheckEmail.mock.inspectFuncCheckEmail != nil {
		mmCheckEmail.mock.t.Fatalf("Inspect function is already set for ScamDetectorClientMock.CheckEmail")
	}

	mmCheckEmail.mock.inspectFuncCheckEmail = f

	return mmCheckEmail
}

// Return sets up results that will be returned by ScamDetectorClient.CheckEmail
func (mmCheckEmail *mScamDetectorClientMockCheckEmail) Return(err error) *ScamDetectorClientMock {
	if mmCheckEmail.mock.funcCheckEmail != nil {
		mmCheckEmail.mock.t.Fatalf("ScamDetectorClientMock.CheckEmail mock is already set by Set")
	}

	if mmCheckEmail.defaultExpectation == nil {
		mmCheckEmail.defaultExpectation = &ScamDetectorClientMockCheckEmailExpectation{mock: mmCheckEmail.mock}
	}
	mmCheckEmail.defaultExpectation.results = &ScamDetectorClientMockCheckEmailResults{err}
	return mmCheckEmail.mock
}

//Set uses given function f to mock the ScamDetectorClient.CheckEmail method
func (mmCheckEmail *mScamDetectorClientMockCheckEmail) Set(f func(email string) (err error)) *ScamDetectorClientMock {
	if mmCheckEmail.defaultExpectation != nil {
		mmCheckEmail.mock.t.Fatalf("Default expectation is already set for the ScamDetectorClient.CheckEmail method")
	}

	if len(mmCheckEmail.expectations) > 0 {
		mmCheckEmail.mock.t.Fatalf("Some expectations are already set for the ScamDetectorClient.CheckEmail method")
	}

	mmCheckEmail.mock.funcCheckEmail = f
	return mmCheckEmail.mock
}

// When sets expectation for the ScamDetectorClient.CheckEmail which will trigger the result defined by the following
// Then helper
func (mmCheckEmail *mScamDetectorClientMockCheckEmail) When(email string) *ScamDetectorClientMockCheckEmailExpectation {
	if mmCheckEmail.mock.funcCheckEmail != nil {
		mmCheckEmail.mock.t.Fatalf("ScamDetectorClientMock.CheckEmail mock is already set by Set")
	}

	expectation := &ScamDetectorClientMockCheckEmailExpectation{
		mock:   mmCheckEmail.mock,
		params: &ScamDetectorClientMockCheckEmailParams{email},
	}
	mmCheckEmail.expectations = append(mmCheckEmail.expectations, expectation)
	return expectation
}

// Then sets up ScamDetectorClient.CheckEmail return parameters for the expectation previously defined by the When method
func (e *ScamDetectorClientMockCheckEmailExpectation) Then(err error) *ScamDetectorClientMock {
	e.results = &ScamDetectorClientMockCheckEmailResults{err}
	return e.mock
}

// CheckEmail implements twitter.ScamDetectorClient
func (mmCheckEmail *ScamDetectorClientMock) CheckEmail(email string) (err error) {
	mm_atomic.AddUint64(&mmCheckEmail.beforeCheckEmailCounter, 1)
	defer mm_atomic.AddUint64(&mmCheckEmail.afterCheckEmailCounter, 1)

	if mmCheckEmail.inspectFuncCheckEmail != nil {
		mmCheckEmail.inspectFuncCheckEmail(email)
	}

	mm_params := &ScamDetectorClientMockCheckEmailParams{email}

	// Record call args
	mmCheckEmail.CheckEmailMock.mutex.Lock()
	mmCheckEmail.CheckEmailMock.callArgs = append(mmCheckEmail.CheckEmailMock.callArgs, mm_params)
	mmCheckEmail.CheckEmailMock.mutex.Unlock()

	for _, e := range mmCheckEmail.CheckEmailMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmCheckEmail.CheckEmailMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmCheckEmail.CheckEmailMock.defaultExpectation.Counter, 1)
		mm_want := mmCheckEmail.CheckEmailMock.defaultExpectation.params
		mm_got := ScamDetectorClientMockCheckEmailParams{email}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmCheckEmail.t.Errorf("ScamDetectorClientMock.CheckEmail got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmCheckEmail.CheckEmailMock.defaultExpectation.results
		if mm_results == nil {
			mmCheckEmail.t.Fatal("No results are set for the ScamDetectorClientMock.CheckEmail")
		}
		return (*mm_results).err
	}
	if mmCheckEmail.funcCheckEmail != nil {
		return mmCheckEmail.funcCheckEmail(email)
	}
	mmCheckEmail.t.Fatalf("Unexpected call to ScamDetectorClientMock.CheckEmail. %v", email)
	return
}

// CheckEmailAfterCounter returns a count of finished ScamDetectorClientMock.CheckEmail invocations
func (mmCheckEmail *ScamDetectorClientMock) CheckEmailAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCheckEmail.afterCheckEmailCounter)
}

// CheckEmailBeforeCounter returns a count of ScamDetectorClientMock.CheckEmail invocations
func (mmCheckEmail *ScamDetectorClientMock) CheckEmailBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCheckEmail.beforeCheckEmailCounter)
}

// Calls returns a list of arguments used in each call to ScamDetectorClientMock.CheckEmail.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmCheckEmail *mScamDetectorClientMockCheckEmail) Calls() []*ScamDetectorClientMockCheckEmailParams {
	mmCheckEmail.mutex.RLock()

	argCopy := make([]*ScamDetectorClientMockCheckEmailParams, len(mmCheckEmail.callArgs))
	copy(argCopy, mmCheckEmail.callArgs)

	mmCheckEmail.mutex.RUnlock()

	return argCopy
}

// MinimockCheckEmailDone returns true if the count of the CheckEmail invocations corresponds
// the number of defined expectations
func (m *ScamDetectorClientMock) MinimockCheckEmailDone() bool {
	for _, e := range m.CheckEmailMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.CheckEmailMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterCheckEmailCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcCheckEmail != nil && mm_atomic.LoadUint64(&m.afterCheckEmailCounter) < 1 {
		return false
	}
	return true
}

// MinimockCheckEmailInspect logs each unmet expectation
func (m *ScamDetectorClientMock) MinimockCheckEmailInspect() {
	for _, e := range m.CheckEmailMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to ScamDetectorClientMock.CheckEmail with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.CheckEmailMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterCheckEmailCounter) < 1 {
		if m.CheckEmailMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to ScamDetectorClientMock.CheckEmail")
		} else {
			m.t.Errorf("Expected call to ScamDetectorClientMock.CheckEmail with params: %#v", *m.CheckEmailMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcCheckEmail != nil && mm_atomic.LoadUint64(&m.afterCheckEmailCounter) < 1 {
		m.t.Error("Expected call to ScamDetectorClientMock.CheckEmail")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *ScamDetectorClientMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockCheckEmailInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *ScamDetectorClientMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *ScamDetectorClientMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockCheckEmailDone()
}
