// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: pkg/proto/twitter.proto

package proto

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on AddTweetRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AddTweetRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddTweetRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddTweetRequestMultiError, or nil if none found.
func (m *AddTweetRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddTweetRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(m.GetText()) > 512 {
		err := AddTweetRequestValidationError{
			field:  "Text",
			reason: "value length must be at most 512 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetUserId() <= 0 {
		err := AddTweetRequestValidationError{
			field:  "UserId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return AddTweetRequestMultiError(errors)
	}

	return nil
}

// AddTweetRequestMultiError is an error wrapping multiple validation errors
// returned by AddTweetRequest.ValidateAll() if the designated constraints
// aren't met.
type AddTweetRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddTweetRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddTweetRequestMultiError) AllErrors() []error { return m }

// AddTweetRequestValidationError is the validation error returned by
// AddTweetRequest.Validate if the designated constraints aren't met.
type AddTweetRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddTweetRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddTweetRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddTweetRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddTweetRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddTweetRequestValidationError) ErrorName() string { return "AddTweetRequestValidationError" }

// Error satisfies the builtin error interface
func (e AddTweetRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddTweetRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddTweetRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddTweetRequestValidationError{}

// Validate checks the field values on AddTweetResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AddTweetResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddTweetResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddTweetResponseMultiError, or nil if none found.
func (m *AddTweetResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AddTweetResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AddTweetResponseMultiError(errors)
	}

	return nil
}

// AddTweetResponseMultiError is an error wrapping multiple validation errors
// returned by AddTweetResponse.ValidateAll() if the designated constraints
// aren't met.
type AddTweetResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddTweetResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddTweetResponseMultiError) AllErrors() []error { return m }

// AddTweetResponseValidationError is the validation error returned by
// AddTweetResponse.Validate if the designated constraints aren't met.
type AddTweetResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddTweetResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddTweetResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddTweetResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddTweetResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddTweetResponseValidationError) ErrorName() string { return "AddTweetResponseValidationError" }

// Error satisfies the builtin error interface
func (e AddTweetResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddTweetResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddTweetResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddTweetResponseValidationError{}

// Validate checks the field values on GetNewsFeedRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetNewsFeedRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetNewsFeedRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetNewsFeedRequestMultiError, or nil if none found.
func (m *GetNewsFeedRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetNewsFeedRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetLimit() <= 0 {
		err := GetNewsFeedRequestValidationError{
			field:  "Limit",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetOffset() < 0 {
		err := GetNewsFeedRequestValidationError{
			field:  "Offset",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetUserId() <= 0 {
		err := GetNewsFeedRequestValidationError{
			field:  "UserId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetNewsFeedRequestMultiError(errors)
	}

	return nil
}

// GetNewsFeedRequestMultiError is an error wrapping multiple validation errors
// returned by GetNewsFeedRequest.ValidateAll() if the designated constraints
// aren't met.
type GetNewsFeedRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetNewsFeedRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetNewsFeedRequestMultiError) AllErrors() []error { return m }

// GetNewsFeedRequestValidationError is the validation error returned by
// GetNewsFeedRequest.Validate if the designated constraints aren't met.
type GetNewsFeedRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetNewsFeedRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetNewsFeedRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetNewsFeedRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetNewsFeedRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetNewsFeedRequestValidationError) ErrorName() string {
	return "GetNewsFeedRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetNewsFeedRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetNewsFeedRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetNewsFeedRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetNewsFeedRequestValidationError{}

// Validate checks the field values on GetNewsFeedResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetNewsFeedResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetNewsFeedResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetNewsFeedResponseMultiError, or nil if none found.
func (m *GetNewsFeedResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetNewsFeedResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetNewsFeedResponseMultiError(errors)
	}

	return nil
}

// GetNewsFeedResponseMultiError is an error wrapping multiple validation
// errors returned by GetNewsFeedResponse.ValidateAll() if the designated
// constraints aren't met.
type GetNewsFeedResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetNewsFeedResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetNewsFeedResponseMultiError) AllErrors() []error { return m }

// GetNewsFeedResponseValidationError is the validation error returned by
// GetNewsFeedResponse.Validate if the designated constraints aren't met.
type GetNewsFeedResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetNewsFeedResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetNewsFeedResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetNewsFeedResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetNewsFeedResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetNewsFeedResponseValidationError) ErrorName() string {
	return "GetNewsFeedResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetNewsFeedResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetNewsFeedResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetNewsFeedResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetNewsFeedResponseValidationError{}

// Validate checks the field values on RegisterRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *RegisterRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RegisterRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RegisterRequestMultiError, or nil if none found.
func (m *RegisterRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RegisterRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUser() == nil {
		err := RegisterRequestValidationError{
			field:  "User",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RegisterRequestValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RegisterRequestValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RegisterRequestValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RegisterRequestMultiError(errors)
	}

	return nil
}

// RegisterRequestMultiError is an error wrapping multiple validation errors
// returned by RegisterRequest.ValidateAll() if the designated constraints
// aren't met.
type RegisterRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RegisterRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RegisterRequestMultiError) AllErrors() []error { return m }

// RegisterRequestValidationError is the validation error returned by
// RegisterRequest.Validate if the designated constraints aren't met.
type RegisterRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegisterRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegisterRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegisterRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegisterRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegisterRequestValidationError) ErrorName() string { return "RegisterRequestValidationError" }

// Error satisfies the builtin error interface
func (e RegisterRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegisterRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegisterRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegisterRequestValidationError{}

// Validate checks the field values on UserProfile with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UserProfile) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserProfile with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UserProfileMultiError, or
// nil if none found.
func (m *UserProfile) ValidateAll() error {
	return m.validate(true)
}

func (m *UserProfile) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateEmail(m.GetEmail()); err != nil {
		err = UserProfileValidationError{
			field:  "Email",
			reason: "value must be a valid email address",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetFullName()); l < 2 || l > 64 {
		err := UserProfileValidationError{
			field:  "FullName",
			reason: "value length must be between 2 and 64 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetCaption()) > 512 {
		err := UserProfileValidationError{
			field:  "Caption",
			reason: "value length must be at most 512 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if t := m.GetDateOfBirth(); t != nil {
		ts, err := t.AsTime(), t.CheckValid()
		if err != nil {
			err = UserProfileValidationError{
				field:  "DateOfBirth",
				reason: "value is not a valid timestamp",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		} else {

			now := time.Now()
			within := time.Duration(3153600000*time.Second + 0*time.Nanosecond)

			if ts.Sub(now) >= 0 || ts.Sub(now.Add(-within)) < 0 {
				err := UserProfileValidationError{
					field:  "DateOfBirth",
					reason: "value must be less than now within 876000h0m0s",
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}

		}
	}

	if len(errors) > 0 {
		return UserProfileMultiError(errors)
	}

	return nil
}

func (m *UserProfile) _validateHostname(host string) error {
	s := strings.ToLower(strings.TrimSuffix(host, "."))

	if len(host) > 253 {
		return errors.New("hostname cannot exceed 253 characters")
	}

	for _, part := range strings.Split(s, ".") {
		if l := len(part); l == 0 || l > 63 {
			return errors.New("hostname part must be non-empty and cannot exceed 63 characters")
		}

		if part[0] == '-' {
			return errors.New("hostname parts cannot begin with hyphens")
		}

		if part[len(part)-1] == '-' {
			return errors.New("hostname parts cannot end with hyphens")
		}

		for _, r := range part {
			if (r < 'a' || r > 'z') && (r < '0' || r > '9') && r != '-' {
				return fmt.Errorf("hostname parts can only contain alphanumeric characters or hyphens, got %q", string(r))
			}
		}
	}

	return nil
}

func (m *UserProfile) _validateEmail(addr string) error {
	a, err := mail.ParseAddress(addr)
	if err != nil {
		return err
	}
	addr = a.Address

	if len(addr) > 254 {
		return errors.New("email addresses cannot exceed 254 characters")
	}

	parts := strings.SplitN(addr, "@", 2)

	if len(parts[0]) > 64 {
		return errors.New("email address local phrase cannot exceed 64 characters")
	}

	return m._validateHostname(parts[1])
}

// UserProfileMultiError is an error wrapping multiple validation errors
// returned by UserProfile.ValidateAll() if the designated constraints aren't met.
type UserProfileMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserProfileMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserProfileMultiError) AllErrors() []error { return m }

// UserProfileValidationError is the validation error returned by
// UserProfile.Validate if the designated constraints aren't met.
type UserProfileValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserProfileValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserProfileValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserProfileValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserProfileValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserProfileValidationError) ErrorName() string { return "UserProfileValidationError" }

// Error satisfies the builtin error interface
func (e UserProfileValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserProfile.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserProfileValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserProfileValidationError{}

// Validate checks the field values on RegisterResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *RegisterResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RegisterResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RegisterResponseMultiError, or nil if none found.
func (m *RegisterResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RegisterResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	if len(errors) > 0 {
		return RegisterResponseMultiError(errors)
	}

	return nil
}

// RegisterResponseMultiError is an error wrapping multiple validation errors
// returned by RegisterResponse.ValidateAll() if the designated constraints
// aren't met.
type RegisterResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RegisterResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RegisterResponseMultiError) AllErrors() []error { return m }

// RegisterResponseValidationError is the validation error returned by
// RegisterResponse.Validate if the designated constraints aren't met.
type RegisterResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegisterResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegisterResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegisterResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegisterResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegisterResponseValidationError) ErrorName() string { return "RegisterResponseValidationError" }

// Error satisfies the builtin error interface
func (e RegisterResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegisterResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegisterResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegisterResponseValidationError{}

// Validate checks the field values on UpdateCaptionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateCaptionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateCaptionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateCaptionRequestMultiError, or nil if none found.
func (m *UpdateCaptionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateCaptionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUserId() <= 0 {
		err := UpdateCaptionRequestValidationError{
			field:  "UserId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetNewCaption()) > 512 {
		err := UpdateCaptionRequestValidationError{
			field:  "NewCaption",
			reason: "value length must be at most 512 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return UpdateCaptionRequestMultiError(errors)
	}

	return nil
}

// UpdateCaptionRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateCaptionRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateCaptionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateCaptionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateCaptionRequestMultiError) AllErrors() []error { return m }

// UpdateCaptionRequestValidationError is the validation error returned by
// UpdateCaptionRequest.Validate if the designated constraints aren't met.
type UpdateCaptionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateCaptionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateCaptionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateCaptionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateCaptionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateCaptionRequestValidationError) ErrorName() string {
	return "UpdateCaptionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateCaptionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateCaptionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateCaptionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateCaptionRequestValidationError{}

// Validate checks the field values on UpdateCaptionResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateCaptionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateCaptionResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateCaptionResponseMultiError, or nil if none found.
func (m *UpdateCaptionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateCaptionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateCaptionResponseMultiError(errors)
	}

	return nil
}

// UpdateCaptionResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateCaptionResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateCaptionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateCaptionResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateCaptionResponseMultiError) AllErrors() []error { return m }

// UpdateCaptionResponseValidationError is the validation error returned by
// UpdateCaptionResponse.Validate if the designated constraints aren't met.
type UpdateCaptionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateCaptionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateCaptionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateCaptionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateCaptionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateCaptionResponseValidationError) ErrorName() string {
	return "UpdateCaptionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateCaptionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateCaptionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateCaptionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateCaptionResponseValidationError{}

// Validate checks the field values on FollowRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *FollowRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FollowRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in FollowRequestMultiError, or
// nil if none found.
func (m *FollowRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *FollowRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUserId() <= 0 {
		err := FollowRequestValidationError{
			field:  "UserId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetNewFollowerId() <= 0 {
		err := FollowRequestValidationError{
			field:  "NewFollowerId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return FollowRequestMultiError(errors)
	}

	return nil
}

// FollowRequestMultiError is an error wrapping multiple validation errors
// returned by FollowRequest.ValidateAll() if the designated constraints
// aren't met.
type FollowRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FollowRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FollowRequestMultiError) AllErrors() []error { return m }

// FollowRequestValidationError is the validation error returned by
// FollowRequest.Validate if the designated constraints aren't met.
type FollowRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FollowRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FollowRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FollowRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FollowRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FollowRequestValidationError) ErrorName() string { return "FollowRequestValidationError" }

// Error satisfies the builtin error interface
func (e FollowRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFollowRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FollowRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FollowRequestValidationError{}

// Validate checks the field values on FollowResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *FollowResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FollowResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in FollowResponseMultiError,
// or nil if none found.
func (m *FollowResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *FollowResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return FollowResponseMultiError(errors)
	}

	return nil
}

// FollowResponseMultiError is an error wrapping multiple validation errors
// returned by FollowResponse.ValidateAll() if the designated constraints
// aren't met.
type FollowResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FollowResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FollowResponseMultiError) AllErrors() []error { return m }

// FollowResponseValidationError is the validation error returned by
// FollowResponse.Validate if the designated constraints aren't met.
type FollowResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FollowResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FollowResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FollowResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FollowResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FollowResponseValidationError) ErrorName() string { return "FollowResponseValidationError" }

// Error satisfies the builtin error interface
func (e FollowResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFollowResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FollowResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FollowResponseValidationError{}

// Validate checks the field values on UnfollowRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UnfollowRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UnfollowRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UnfollowRequestMultiError, or nil if none found.
func (m *UnfollowRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UnfollowRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUserId() <= 0 {
		err := UnfollowRequestValidationError{
			field:  "UserId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetOldFollowerId() <= 0 {
		err := UnfollowRequestValidationError{
			field:  "OldFollowerId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return UnfollowRequestMultiError(errors)
	}

	return nil
}

// UnfollowRequestMultiError is an error wrapping multiple validation errors
// returned by UnfollowRequest.ValidateAll() if the designated constraints
// aren't met.
type UnfollowRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UnfollowRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UnfollowRequestMultiError) AllErrors() []error { return m }

// UnfollowRequestValidationError is the validation error returned by
// UnfollowRequest.Validate if the designated constraints aren't met.
type UnfollowRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UnfollowRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UnfollowRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UnfollowRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UnfollowRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UnfollowRequestValidationError) ErrorName() string { return "UnfollowRequestValidationError" }

// Error satisfies the builtin error interface
func (e UnfollowRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUnfollowRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UnfollowRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UnfollowRequestValidationError{}

// Validate checks the field values on UnfollowResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UnfollowResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UnfollowResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UnfollowResponseMultiError, or nil if none found.
func (m *UnfollowResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UnfollowResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UnfollowResponseMultiError(errors)
	}

	return nil
}

// UnfollowResponseMultiError is an error wrapping multiple validation errors
// returned by UnfollowResponse.ValidateAll() if the designated constraints
// aren't met.
type UnfollowResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UnfollowResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UnfollowResponseMultiError) AllErrors() []error { return m }

// UnfollowResponseValidationError is the validation error returned by
// UnfollowResponse.Validate if the designated constraints aren't met.
type UnfollowResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UnfollowResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UnfollowResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UnfollowResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UnfollowResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UnfollowResponseValidationError) ErrorName() string { return "UnfollowResponseValidationError" }

// Error satisfies the builtin error interface
func (e UnfollowResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUnfollowResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UnfollowResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UnfollowResponseValidationError{}

// Validate checks the field values on LoginRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LoginRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoginRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LoginRequestMultiError, or
// nil if none found.
func (m *LoginRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *LoginRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateEmail(m.GetEmail()); err != nil {
		err = LoginRequestValidationError{
			field:  "Email",
			reason: "value must be a valid email address",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return LoginRequestMultiError(errors)
	}

	return nil
}

func (m *LoginRequest) _validateHostname(host string) error {
	s := strings.ToLower(strings.TrimSuffix(host, "."))

	if len(host) > 253 {
		return errors.New("hostname cannot exceed 253 characters")
	}

	for _, part := range strings.Split(s, ".") {
		if l := len(part); l == 0 || l > 63 {
			return errors.New("hostname part must be non-empty and cannot exceed 63 characters")
		}

		if part[0] == '-' {
			return errors.New("hostname parts cannot begin with hyphens")
		}

		if part[len(part)-1] == '-' {
			return errors.New("hostname parts cannot end with hyphens")
		}

		for _, r := range part {
			if (r < 'a' || r > 'z') && (r < '0' || r > '9') && r != '-' {
				return fmt.Errorf("hostname parts can only contain alphanumeric characters or hyphens, got %q", string(r))
			}
		}
	}

	return nil
}

func (m *LoginRequest) _validateEmail(addr string) error {
	a, err := mail.ParseAddress(addr)
	if err != nil {
		return err
	}
	addr = a.Address

	if len(addr) > 254 {
		return errors.New("email addresses cannot exceed 254 characters")
	}

	parts := strings.SplitN(addr, "@", 2)

	if len(parts[0]) > 64 {
		return errors.New("email address local phrase cannot exceed 64 characters")
	}

	return m._validateHostname(parts[1])
}

// LoginRequestMultiError is an error wrapping multiple validation errors
// returned by LoginRequest.ValidateAll() if the designated constraints aren't met.
type LoginRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoginRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoginRequestMultiError) AllErrors() []error { return m }

// LoginRequestValidationError is the validation error returned by
// LoginRequest.Validate if the designated constraints aren't met.
type LoginRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoginRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoginRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoginRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoginRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoginRequestValidationError) ErrorName() string { return "LoginRequestValidationError" }

// Error satisfies the builtin error interface
func (e LoginRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoginRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoginRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoginRequestValidationError{}

// Validate checks the field values on LoginResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LoginResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoginResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LoginResponseMultiError, or
// nil if none found.
func (m *LoginResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *LoginResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	if all {
		switch v := interface{}(m.GetUserProfile()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, LoginResponseValidationError{
					field:  "UserProfile",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, LoginResponseValidationError{
					field:  "UserProfile",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUserProfile()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LoginResponseValidationError{
				field:  "UserProfile",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return LoginResponseMultiError(errors)
	}

	return nil
}

// LoginResponseMultiError is an error wrapping multiple validation errors
// returned by LoginResponse.ValidateAll() if the designated constraints
// aren't met.
type LoginResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoginResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoginResponseMultiError) AllErrors() []error { return m }

// LoginResponseValidationError is the validation error returned by
// LoginResponse.Validate if the designated constraints aren't met.
type LoginResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoginResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoginResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoginResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoginResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoginResponseValidationError) ErrorName() string { return "LoginResponseValidationError" }

// Error satisfies the builtin error interface
func (e LoginResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoginResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoginResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoginResponseValidationError{}

// Validate checks the field values on RecommendUsersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RecommendUsersRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RecommendUsersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RecommendUsersRequestMultiError, or nil if none found.
func (m *RecommendUsersRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RecommendUsersRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUserId() <= 0 {
		err := RecommendUsersRequestValidationError{
			field:  "UserId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return RecommendUsersRequestMultiError(errors)
	}

	return nil
}

// RecommendUsersRequestMultiError is an error wrapping multiple validation
// errors returned by RecommendUsersRequest.ValidateAll() if the designated
// constraints aren't met.
type RecommendUsersRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RecommendUsersRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RecommendUsersRequestMultiError) AllErrors() []error { return m }

// RecommendUsersRequestValidationError is the validation error returned by
// RecommendUsersRequest.Validate if the designated constraints aren't met.
type RecommendUsersRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RecommendUsersRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RecommendUsersRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RecommendUsersRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RecommendUsersRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RecommendUsersRequestValidationError) ErrorName() string {
	return "RecommendUsersRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RecommendUsersRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRecommendUsersRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RecommendUsersRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RecommendUsersRequestValidationError{}

// Validate checks the field values on RecommendUsersResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RecommendUsersResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RecommendUsersResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RecommendUsersResponseMultiError, or nil if none found.
func (m *RecommendUsersResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RecommendUsersResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetUsers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RecommendUsersResponseValidationError{
						field:  fmt.Sprintf("Users[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RecommendUsersResponseValidationError{
						field:  fmt.Sprintf("Users[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RecommendUsersResponseValidationError{
					field:  fmt.Sprintf("Users[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return RecommendUsersResponseMultiError(errors)
	}

	return nil
}

// RecommendUsersResponseMultiError is an error wrapping multiple validation
// errors returned by RecommendUsersResponse.ValidateAll() if the designated
// constraints aren't met.
type RecommendUsersResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RecommendUsersResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RecommendUsersResponseMultiError) AllErrors() []error { return m }

// RecommendUsersResponseValidationError is the validation error returned by
// RecommendUsersResponse.Validate if the designated constraints aren't met.
type RecommendUsersResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RecommendUsersResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RecommendUsersResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RecommendUsersResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RecommendUsersResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RecommendUsersResponseValidationError) ErrorName() string {
	return "RecommendUsersResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RecommendUsersResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRecommendUsersResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RecommendUsersResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RecommendUsersResponseValidationError{}
